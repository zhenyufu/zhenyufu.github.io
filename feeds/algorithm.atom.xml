<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>csmojo - Algorithm</title><link href="https://csmojo.com/" rel="alternate"></link><link href="https://csmojo.com/feeds/algorithm.atom.xml" rel="self"></link><id>https://csmojo.com/</id><updated>2017-05-29T17:13:54-07:00</updated><entry><title>Graph Basics</title><link href="https://csmojo.com/posts/graph-basics.html" rel="alternate"></link><published>2017-05-29T17:13:54-07:00</published><updated>2017-05-29T17:13:54-07:00</updated><author><name>David</name></author><id>tag:csmojo.com,2017-05-29:/posts/graph-basics.html</id><summary type="html">Some basic concept on graphs</summary><content type="html">&lt;p&gt;Some basic concept on graphs&lt;/p&gt;
&lt;h3&gt;Stuff&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Graph G&lt;ul&gt;
&lt;li&gt;G = (V, E) vertices/ nodes and edges &lt;/li&gt;
&lt;li&gt;n = |V|, m = |E|&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple Graph: unweighted, undirected, no self loops, no multi-edges&lt;/li&gt;
&lt;li&gt;Simple Cycle: Has a path that starts and ends at the same node&lt;/li&gt;
&lt;li&gt;When is an undirected graph a tree (any two implies the third): &lt;ul&gt;
&lt;li&gt;no cycles&lt;/li&gt;
&lt;li&gt;is connected&lt;/li&gt;
&lt;li&gt;m = n - 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Find path between two nodes: BFS, DFS ( \(\theta (m + n)\) ) &lt;/li&gt;
&lt;li&gt;Bipartite graph: nodes can be divided into two different sets with no vertices connecting within a set&lt;ul&gt;
&lt;li&gt;is not bipartite &amp;lt;=&amp;gt; contains a cycle with an odd number of nodes &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Directed graph connectivity&lt;ul&gt;
&lt;li&gt;strongly connected: every pair of nodes can reach each other &lt;/li&gt;
&lt;li&gt;connected: for every pair of nodes, one can reach the other &lt;/li&gt;
&lt;li&gt;weakly connected: every pair of nodes can reach each other if one ignores edge directions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Directed acyclic graph (DAG)&lt;ul&gt;
&lt;li&gt;is a directed graph with no directed cycles&lt;/li&gt;
&lt;li&gt;Topological ordering: for all the nodes are ordered that a earlier nodes goes to a later node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Algorithm"></category><category term="Algorithm"></category><category term="Discrete Math"></category></entry><entry><title>How to classify and compare algorithm asymptotic runtimes</title><link href="https://csmojo.com/posts/how-to-classify-and-compare-algorithm-asymptotic-runtimes.html" rel="alternate"></link><published>2015-09-11T22:23:36-07:00</published><updated>2015-09-11T22:23:36-07:00</updated><author><name>David</name></author><id>tag:csmojo.com,2015-09-11:/posts/how-to-classify-and-compare-algorithm-asymptotic-runtimes.html</id><summary type="html">Asymptotic runtimes can be classified to help with comparison and understanding. There are also some tricky examples that can't be classified at first sight, but will require simple mathematical transformations.</summary><content type="html">&lt;p&gt;Asymptotic runtimes can be classified to help with comparison and understanding. There are also some tricky examples that can't be classified at first sight, but will require simple mathematical transformations.&lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Using constants a, b, c&lt;/li&gt;
&lt;li&gt;Using variables n, x, y&lt;/li&gt;
&lt;li&gt;log without subscript is for simplicity, assume \(log_2\) if a value is necessary  (the base doesn't matter because \( log_b(x) = {log_a(x) \over log_a(b)} \))&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Runtime Table&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Runtime&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Short&lt;/th&gt;
&lt;th&gt;Function Æ’(n)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Shortest&lt;/td&gt;
&lt;td&gt;Constant&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;\(a\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Logarithmic&lt;/td&gt;
&lt;td&gt;Log&lt;/td&gt;
&lt;td&gt;\(log (n)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Polylogarithmic&lt;/td&gt;
&lt;td&gt;Poly Log&lt;/td&gt;
&lt;td&gt;\(log^a (n)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;1 Polynomial&lt;/td&gt;
&lt;td&gt;Small Poly&lt;/td&gt;
&lt;td&gt;\(n^a \quad (a&amp;lt;1)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linear&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;\(n\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Linearithmic&lt;/td&gt;
&lt;td&gt;n log (n)&lt;/td&gt;
&lt;td&gt;\(n log (n)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;gt;1 Polynomial&lt;/td&gt;
&lt;td&gt;Big Poly&lt;/td&gt;
&lt;td&gt;\(n^a \quad (a&amp;gt;1)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Exponential&lt;/td&gt;
&lt;td&gt;Expo&lt;/td&gt;
&lt;td&gt;\(a^n \quad (a&amp;gt;1)\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Factorial&lt;/td&gt;
&lt;td&gt;Fact&lt;/td&gt;
&lt;td&gt;\(n!\)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Longest&lt;/td&gt;
&lt;td&gt;Power n&lt;/td&gt;
&lt;td&gt;n n&lt;/td&gt;
&lt;td&gt;\(n^n\)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;log transformations:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;\( a^{log_a(x)} = x \)&lt;/li&gt;
&lt;li&gt;\( log_a(a^x) = x \)&lt;/li&gt;
&lt;li&gt;\( log_b(x) = {log_a(x) \over log_a(b)} \)&lt;/li&gt;
&lt;li&gt;\(log(xy) = log(x) + log(y) \)&lt;/li&gt;
&lt;li&gt;\( log (x^y) = y log (x) \)&lt;/li&gt;
&lt;li&gt;\( x^{log (y)} = y^{log (x)} \)&lt;/li&gt;
&lt;li&gt;log preserves inequality: You can log both sides of an inequality as long as both sides are positive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Tricky comparison examples that require transformation:&lt;/h3&gt;
&lt;h4&gt;1. Transformations:&lt;/h4&gt;
&lt;p&gt;\( a^{log_a(x)} = x \) $$ 2^{log(n)} = n $$
summation \( \sum \) $$ \sum_1^n n^2 = n^3 $$&lt;/p&gt;
&lt;h4&gt;2. Divide to a known runtime:&lt;/h4&gt;
&lt;p&gt;\(n \over log(n)\) vs &amp;lt;1 Polynomial: Divide by \( n^{1 \over 2}\) $$ {n \over log(n)} \quad vs \quad n^{1 \over 2}$$ $${n^{1 \over 2} \over log(n)} \quad &amp;gt; \quad 1$$&lt;/p&gt;
&lt;h4&gt;3. log both sides:&lt;/h4&gt;
&lt;p&gt;Especially when there is a \( 2^x \)
\(n^{log(n)}\) vs Exponential : $$ n^{log(n)} \quad vs \quad 2^n $$ $$ log(n^{log(n)}) \quad vs \quad log(2^n)$$ $$ log^2 (n) \quad &amp;lt; \quad n $$
\(n!\) vs \(2^{n^2}\) : $$ n! \quad vs \quad 2^{n^2} $$$$ log(n!) \quad vs \quad log(2^{n^2}) $$$$\text{use } n^n \text{ for } n!$$$$ log(n^n) \quad vs \quad n^2 $$$$ n log(n) \quad &amp;lt; \quad n^2 $$
\(n(log n)^{10}\) vs &amp;gt; 1 Polynomial: $$ n(log n)^{10} \quad vs \quad n^{1.1} $$$$ log n^{10} \quad vs \quad n^{0.1} $$$$ 10 log( log n) \quad &amp;lt; \quad 0.1 log( n ) $$&lt;/p&gt;</content><category term="Algorithm"></category><category term="Algorithm"></category><category term="Discrete Math"></category><category term="Runtime"></category></entry></feed>